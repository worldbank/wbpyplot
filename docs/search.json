[
  {
    "objectID": "reference/wb_plot.html",
    "href": "reference/wb_plot.html",
    "title": "wb_plot",
    "section": "",
    "text": "wb_plot(\n    width=600,\n    height=500,\n    dpi=100,\n    nrows=1,\n    ncols=1,\n    save_path=None,\n    title=None,\n    subtitle=None,\n    note=None,\n    palette=None,\n    palette_n=None,\n    palette_bins=None,\n    palette_bin_mode='linear',\n)\nCreate a standardized Matplotlib theme via a decorator for the World Bank with consistent styling, titles, legends, and optional export. Handles both discrete and continuous color logic.\nThe World Bank’s data visualization style guide can be accessed here.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nwidth\nint\nWidth of the figure in pixels.\n600\n\n\nheight\nint\nHeight of the figure in pixels.\n500\n\n\ndpi\nint\nResolution of the figure in dots per inch.\n100\n\n\nnrows\nint\nNumber of subplot rows.\n1\n\n\nncols\nint\nNumber of subplot columns.\n1\n\n\nsave_path\nstr or Path\nFile path to save the rendered figure. If None, the figure is not saved.\nNone\n\n\ntitle\nstr\nMain title displayed at the top of the figure.\nNone\n\n\nsubtitle\nstr\nSubtitle displayed below the main title.\nNone\n\n\nnote\nstr\nFootnote or caption displayed at the bottom of the figure.\nNone\n\n\npalette\nstr, sequence, or Colormap\nColor palette definition. Supports: - Discrete palettes (cycled through categories). - Label-mapped palettes (map colors by label). - Continuous palettes (generate a Matplotlib Colormap).\nNone\n\n\npalette_n\nint\nNumber of colors to sample from the palette.\nNone\n\n\npalette_bins\nint, sequence, or None\nBinning strategy for continuous palettes: - None: no discretization (continuous colormap). - int: number of equally spaced bins. - sequence: explicit bin edges.\nNone\n\n\npalette_bin_mode\n(linear, quantile)\nMethod for discretizing continuous values when palette_bins is specified.\n\"linear\"\n\n\n\n\n\n\n\nFor discrete (categorical) palettes, the function sets axes.prop_cycle before plotting.\nFor label-mapped palettes, it recolors plot elements and their legend entries by label.\nFor continuous palettes, it creates a Colormap and, if bins are specified, generates a ListedColormap and corresponding BoundaryNorm. These are applied to compatible artists (e.g., imshow, pcolormesh, contourf), and colorbars are refreshed automatically.\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nfig\nmatplotlib.figure.Figure\nThe created figure object.\n\n\naxes\narray of matplotlib.axes.Axes\nThe subplot axes array."
  },
  {
    "objectID": "reference/wb_plot.html#parameters",
    "href": "reference/wb_plot.html#parameters",
    "title": "wb_plot",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nwidth\nint\nWidth of the figure in pixels.\n600\n\n\nheight\nint\nHeight of the figure in pixels.\n500\n\n\ndpi\nint\nResolution of the figure in dots per inch.\n100\n\n\nnrows\nint\nNumber of subplot rows.\n1\n\n\nncols\nint\nNumber of subplot columns.\n1\n\n\nsave_path\nstr or Path\nFile path to save the rendered figure. If None, the figure is not saved.\nNone\n\n\ntitle\nstr\nMain title displayed at the top of the figure.\nNone\n\n\nsubtitle\nstr\nSubtitle displayed below the main title.\nNone\n\n\nnote\nstr\nFootnote or caption displayed at the bottom of the figure.\nNone\n\n\npalette\nstr, sequence, or Colormap\nColor palette definition. Supports: - Discrete palettes (cycled through categories). - Label-mapped palettes (map colors by label). - Continuous palettes (generate a Matplotlib Colormap).\nNone\n\n\npalette_n\nint\nNumber of colors to sample from the palette.\nNone\n\n\npalette_bins\nint, sequence, or None\nBinning strategy for continuous palettes: - None: no discretization (continuous colormap). - int: number of equally spaced bins. - sequence: explicit bin edges.\nNone\n\n\npalette_bin_mode\n(linear, quantile)\nMethod for discretizing continuous values when palette_bins is specified.\n\"linear\""
  },
  {
    "objectID": "reference/wb_plot.html#notes",
    "href": "reference/wb_plot.html#notes",
    "title": "wb_plot",
    "section": "",
    "text": "For discrete (categorical) palettes, the function sets axes.prop_cycle before plotting.\nFor label-mapped palettes, it recolors plot elements and their legend entries by label.\nFor continuous palettes, it creates a Colormap and, if bins are specified, generates a ListedColormap and corresponding BoundaryNorm. These are applied to compatible artists (e.g., imshow, pcolormesh, contourf), and colorbars are refreshed automatically."
  },
  {
    "objectID": "reference/wb_plot.html#returns",
    "href": "reference/wb_plot.html#returns",
    "title": "wb_plot",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\nfig\nmatplotlib.figure.Figure\nThe created figure object.\n\n\naxes\narray of matplotlib.axes.Axes\nThe subplot axes array."
  },
  {
    "objectID": "reference/index.html",
    "href": "reference/index.html",
    "title": "Function reference",
    "section": "",
    "text": "wb_plot\nCreate a standardized Matplotlib theme via a decorator for the World Bank with consistent styling,"
  },
  {
    "objectID": "reference/index.html#wbpyplot",
    "href": "reference/index.html#wbpyplot",
    "title": "Function reference",
    "section": "",
    "text": "wb_plot\nCreate a standardized Matplotlib theme via a decorator for the World Bank with consistent styling,"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "wbpyplot",
    "section": "",
    "text": "The World Bank matplotlib theme.\n\n\nInstall the package with pip install git+https://github.com/worldbank/wbpyplot.\n\n\n\nWhen the package is installed, load the function decorator into your Python session like so:\nfrom wbpyplot import wb_plot\n\n\nwb_plot is the mai function decorator which styles all matplotlib (and derivatives, such as seaborn). Add it on top of a function calling matlotlib elements.\nFor example:\n@wb_plot(\n    title=\"Government Investment in Key Sectors\",\n    subtitle=\"Spending from 2018 to 2024 (adjusted for inflation)\",\n    note=[\n        (\"Source:\", \"National Treasury Budget Papers\"),\n        (\"Note:\", \"Data adjusted to 2024 dollars using CPI\"),\n    ],\n)\ndef plot_multi_series(axs, *args, **kwargs):\n    ax = axs[0]\n\n    x = np.arange(2018, 2025)\n    y1 = [10, 15, 20, 23, 25, 27, 30]\n    y2 = [5, 8, 12, 16, 20, 21, 24]\n    y3 = [2, 4, 8, 10, 15, 18, 20]\n\n    ax.plot(x, y1, label=\"Education\")\n    ax.plot(x, y2, label=\"Healthcare\")\n    ax.plot(x, y3, label=\"Transport\")\n\n    # Axis label on Y axis only (WB style for time series)\n    ax.set_ylabel(\"Funding (AU$ millions)\")\n\n\n# Call the decorated function with layout text\nplot_multi_series()\nThe theme\n\nchanges the font of all text to Open Sans.\nstyles the title, subtitle, caption, axes and legends according to the World Bank data visualization style guide.\n\nTo apply the World Bank color palettes to your visualizations, see the ‘Colors’ section below.\nOn top of that, the theme has some specific style settings for certain chart types.\nWith time series line graphs, the vertical grid lines, the X axis title and the Y axis title are removed.\nFor line charts, the x aesthetic should be mapped to a date variable, and the y aesthetic to a numerical variable.\nWith bar or column graphs, both vertical and horizontal grid lines are removed, the X axis is moved to the top, and the bar labels are capitalized and bolded. The X axis title is removed, but can be added manually.\nFor bar charts, the x aesthetic should be mapped to a numerical variable, and the y aesthetic to a discrete variable.\nThe World Bank data visualization style calls for value labels next to the bars, which are added by default.\n@wb_plot(\n    title=\"Employment by Sector\",\n    subtitle=\"Distribution across sectors in 2024\",\n    note=[(\"Source:\", \"World Bank, 2024 dataset.\")],\n)\ndef bar_plot(axs):\n    sectors = [\"Agriculture\", \"Industry\", \"Services\"]\n    values = [22, 30, 48]\n\n    ax = axs[0]\n    bars = ax.bar(sectors, values, label=\"Share of employment\")\n\n    ax.set_ylabel(\"Percentage (%)\")\n    ax.set_xlabel(\"Sector\")\n\n\nbar_plot()\nNote that wbpyplot, unlike wbplot, does not currently support beeswarm charts.\nWith a scatter plot, the plot is only styled, but no chart elements (such as the Y axis grid lines, for example) are removed.\nFor scatter plots, both the x and the y aesthetic should be mapped to a numerical variable.\n@wb_plot(\n    title=\"GDP vs Life Expectancy\",\n    subtitle=\"Scatterplot of synthetic data\",\n    note=[(\"Source:\", \"World Bank (fictional).\")],\n)\ndef scatter_plot(axs):\n    np.random.seed(0)\n    x = np.random.normal(50000, 15000, 100)\n    y = np.random.normal(75, 10, 100)\n\n    axs[0].scatter(x, y, label=\"Countries\")\n    axs[0].set_xlabel(\"GDP per capita (USD)\")\n    axs[0].set_ylabel(\"Life expectancy (years)\")\n\n\nscatter_plot()\n\n\n\n\n\nAll World Bank Data Visualization colors are available through the style guide.\n\n\n\nwbpyplot comes with several color scales.\nThe following palettes are available for mapping discrete variables to chart markers. When the palette parameter matches the mapped level variable, the levels will be automatically matched to their corresponding colors. The available discrete palettes and their levels are:\n\nwb_categorical: the default palette, with 9 distinct colors.\nwb_region: colors for regions. Matches the levels “WLD”, “NAC”, “LCN”, “SAS”, “MEA”, “ECS”, “EAS”, “SSF”, “AFE” and “AFW”\nwb_income: colors for income classes. Matches the levels “HIC”, “UMIC”, “LMIC” and “LIC”.\nwb_gender: colors for gender. Matches the levels “male”, “female” and “diverse”\nwb_urbanisation: colors for urbanisation. Matches the levels “urban” and “rural”.\nwb_age: colors for age classes. Matches the levels “youngestAge”, “youngerAge”, “middleAge”, “olderAge” and “oldestAge”\nwb_binary: colors for binary variables. Matches the levels “yes” and “no”\n\nContinuous color scales are available for sequential and diverging palettes.\n\nwb_div_default: This diverging scale works best when showing numbers with a connotation of good/bad for higher or lower values (e.g. GDP growth). Use the warmer shades for the numbers with the more negative connotation and the cooler shades to show positive values.\nwb_div_alt: This diverging scale can be used as an alternative for the Default diverging scale if you want to emphasize the negative connotation of the numbers more strongly.\nwb_div_neutral: This diverging scale was designed to work well in conditions when showing numbers without a clear connotation of good/bad for higher or lower values (e.g. growth in urban vs rural living).\n\nIf you want to sample a small number of colors from the palette, add the parameter palette_n = 2 to the function decorator - changing the integer for your number of colors. The function will select the first two hex codes in the list from the defined color palette.\nIf you have a continous colour scale (i.e. a scale with “seq” or “div” in the name) and want to bin the values into certain categories, set palette_bins argument. The answer can be one of the following:\n\nNone: no discretization (continuous colormap).\nan int: number of equally spaced bins.\na sequence: explicit bin edges.\n\nLikewise if you want to break the bins into linear or other discrete bin sizes, set palette_bin_mode to one of “linear” or “quantile”. Only applies when palette_bins is specified.\n@wb_plot(\n    title=\"Binned with Explicit Thresholds\",\n    subtitle=\"Custom edges: [50, 60, 70, 80, 90, 100]\",\n    note=[(\"Source:\", \"World Bank, 2024 dataset.\")],\n    palette=\"wb_seq_bad_to_good\",\n    palette_bins=[50, 60, 70, 80, 90, 100],  # &lt;- explicit edges\n)\ndef heatmap_edges(axs):\n    ax = axs[0]\n    data = np.random.default_rng(2).integers(50, 96, size=(10, 10))\n    im = ax.imshow(data)\n    ax.figure.colorbar(im, ax=ax, label=\"Literacy (%)\")\n\nheatmap_edges()"
  },
  {
    "objectID": "index.html#installation",
    "href": "index.html#installation",
    "title": "wbpyplot",
    "section": "",
    "text": "Install the package with pip install git+https://github.com/worldbank/wbpyplot."
  },
  {
    "objectID": "index.html#using-the-package",
    "href": "index.html#using-the-package",
    "title": "wbpyplot",
    "section": "",
    "text": "When the package is installed, load the function decorator into your Python session like so:\nfrom wbpyplot import wb_plot\n\n\nwb_plot is the mai function decorator which styles all matplotlib (and derivatives, such as seaborn). Add it on top of a function calling matlotlib elements.\nFor example:\n@wb_plot(\n    title=\"Government Investment in Key Sectors\",\n    subtitle=\"Spending from 2018 to 2024 (adjusted for inflation)\",\n    note=[\n        (\"Source:\", \"National Treasury Budget Papers\"),\n        (\"Note:\", \"Data adjusted to 2024 dollars using CPI\"),\n    ],\n)\ndef plot_multi_series(axs, *args, **kwargs):\n    ax = axs[0]\n\n    x = np.arange(2018, 2025)\n    y1 = [10, 15, 20, 23, 25, 27, 30]\n    y2 = [5, 8, 12, 16, 20, 21, 24]\n    y3 = [2, 4, 8, 10, 15, 18, 20]\n\n    ax.plot(x, y1, label=\"Education\")\n    ax.plot(x, y2, label=\"Healthcare\")\n    ax.plot(x, y3, label=\"Transport\")\n\n    # Axis label on Y axis only (WB style for time series)\n    ax.set_ylabel(\"Funding (AU$ millions)\")\n\n\n# Call the decorated function with layout text\nplot_multi_series()\nThe theme\n\nchanges the font of all text to Open Sans.\nstyles the title, subtitle, caption, axes and legends according to the World Bank data visualization style guide.\n\nTo apply the World Bank color palettes to your visualizations, see the ‘Colors’ section below.\nOn top of that, the theme has some specific style settings for certain chart types.\nWith time series line graphs, the vertical grid lines, the X axis title and the Y axis title are removed.\nFor line charts, the x aesthetic should be mapped to a date variable, and the y aesthetic to a numerical variable.\nWith bar or column graphs, both vertical and horizontal grid lines are removed, the X axis is moved to the top, and the bar labels are capitalized and bolded. The X axis title is removed, but can be added manually.\nFor bar charts, the x aesthetic should be mapped to a numerical variable, and the y aesthetic to a discrete variable.\nThe World Bank data visualization style calls for value labels next to the bars, which are added by default.\n@wb_plot(\n    title=\"Employment by Sector\",\n    subtitle=\"Distribution across sectors in 2024\",\n    note=[(\"Source:\", \"World Bank, 2024 dataset.\")],\n)\ndef bar_plot(axs):\n    sectors = [\"Agriculture\", \"Industry\", \"Services\"]\n    values = [22, 30, 48]\n\n    ax = axs[0]\n    bars = ax.bar(sectors, values, label=\"Share of employment\")\n\n    ax.set_ylabel(\"Percentage (%)\")\n    ax.set_xlabel(\"Sector\")\n\n\nbar_plot()\nNote that wbpyplot, unlike wbplot, does not currently support beeswarm charts.\nWith a scatter plot, the plot is only styled, but no chart elements (such as the Y axis grid lines, for example) are removed.\nFor scatter plots, both the x and the y aesthetic should be mapped to a numerical variable.\n@wb_plot(\n    title=\"GDP vs Life Expectancy\",\n    subtitle=\"Scatterplot of synthetic data\",\n    note=[(\"Source:\", \"World Bank (fictional).\")],\n)\ndef scatter_plot(axs):\n    np.random.seed(0)\n    x = np.random.normal(50000, 15000, 100)\n    y = np.random.normal(75, 10, 100)\n\n    axs[0].scatter(x, y, label=\"Countries\")\n    axs[0].set_xlabel(\"GDP per capita (USD)\")\n    axs[0].set_ylabel(\"Life expectancy (years)\")\n\n\nscatter_plot()\n\n\n\n\n\nAll World Bank Data Visualization colors are available through the style guide.\n\n\n\nwbpyplot comes with several color scales.\nThe following palettes are available for mapping discrete variables to chart markers. When the palette parameter matches the mapped level variable, the levels will be automatically matched to their corresponding colors. The available discrete palettes and their levels are:\n\nwb_categorical: the default palette, with 9 distinct colors.\nwb_region: colors for regions. Matches the levels “WLD”, “NAC”, “LCN”, “SAS”, “MEA”, “ECS”, “EAS”, “SSF”, “AFE” and “AFW”\nwb_income: colors for income classes. Matches the levels “HIC”, “UMIC”, “LMIC” and “LIC”.\nwb_gender: colors for gender. Matches the levels “male”, “female” and “diverse”\nwb_urbanisation: colors for urbanisation. Matches the levels “urban” and “rural”.\nwb_age: colors for age classes. Matches the levels “youngestAge”, “youngerAge”, “middleAge”, “olderAge” and “oldestAge”\nwb_binary: colors for binary variables. Matches the levels “yes” and “no”\n\nContinuous color scales are available for sequential and diverging palettes.\n\nwb_div_default: This diverging scale works best when showing numbers with a connotation of good/bad for higher or lower values (e.g. GDP growth). Use the warmer shades for the numbers with the more negative connotation and the cooler shades to show positive values.\nwb_div_alt: This diverging scale can be used as an alternative for the Default diverging scale if you want to emphasize the negative connotation of the numbers more strongly.\nwb_div_neutral: This diverging scale was designed to work well in conditions when showing numbers without a clear connotation of good/bad for higher or lower values (e.g. growth in urban vs rural living).\n\nIf you want to sample a small number of colors from the palette, add the parameter palette_n = 2 to the function decorator - changing the integer for your number of colors. The function will select the first two hex codes in the list from the defined color palette.\nIf you have a continous colour scale (i.e. a scale with “seq” or “div” in the name) and want to bin the values into certain categories, set palette_bins argument. The answer can be one of the following:\n\nNone: no discretization (continuous colormap).\nan int: number of equally spaced bins.\na sequence: explicit bin edges.\n\nLikewise if you want to break the bins into linear or other discrete bin sizes, set palette_bin_mode to one of “linear” or “quantile”. Only applies when palette_bins is specified.\n@wb_plot(\n    title=\"Binned with Explicit Thresholds\",\n    subtitle=\"Custom edges: [50, 60, 70, 80, 90, 100]\",\n    note=[(\"Source:\", \"World Bank, 2024 dataset.\")],\n    palette=\"wb_seq_bad_to_good\",\n    palette_bins=[50, 60, 70, 80, 90, 100],  # &lt;- explicit edges\n)\ndef heatmap_edges(axs):\n    ax = axs[0]\n    data = np.random.default_rng(2).integers(50, 96, size=(10, 10))\n    im = ax.imshow(data)\n    ax.figure.colorbar(im, ax=ax, label=\"Literacy (%)\")\n\nheatmap_edges()"
  },
  {
    "objectID": "reference/example.html",
    "href": "reference/example.html",
    "title": "Function reference",
    "section": "",
    "text": "wb_plot\nCreate a standardized Matplotlib theme via a decorator for the World Bank with consistent styling,"
  },
  {
    "objectID": "reference/example.html#wbpyplot",
    "href": "reference/example.html#wbpyplot",
    "title": "Function reference",
    "section": "",
    "text": "wb_plot\nCreate a standardized Matplotlib theme via a decorator for the World Bank with consistent styling,"
  }
]